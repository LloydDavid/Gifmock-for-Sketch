// Function that makes it easier to find logged items
var dlog = function(message) {
  log('Gif Mock: ' + message)
}

var sendToGifMock = function(context) {
  // get temp folder path
  var pluginDomain = "com.sketchplugin.gifmock";
  var folderName = "exportedArtboards";
  var fileManager = NSFileManager.defaultManager();
  var tempFolderURL = fileManager.URLsForDirectory_inDomains(NSCachesDirectory, NSUserDomainMask).lastObject().URLByAppendingPathComponent(pluginDomain).URLByAppendingPathComponent(folderName);
  fileManager.createDirectoryAtPath_withIntermediateDirectories_attributes_error(tempFolderURL.path(), true, nil, nil);

  // export selected artboards to temp folder
  var artboards = context.selection.valueForKeyPath("@distinctUnionOfObjects.parentArtboard"),
    loop = artboards.objectEnumerator(),
    exportScale = 1,
    exportFormat = "png",
    jsonFilePath = tempFolderURL.URLByAppendingPathComponent("info").URLByAppendingPathExtension("gifmock").path(),
    artboard, exportURL, exportRequest;

  var state = {
    "isSketch": true,
    "frames": [],
  }

  state.frames = [];

  while(artboard = loop.nextObject()) {
    dlog("Artboard: " + artboard)
    dlog("Export formats: " + artboard.exportOptions().exportFormats())
    dlog("First format: " + artboard.exportOptions().exportFormats().firstObject())

    if (artboard.exportOptions().exportFormats().firstObject()) {
      exportScale = artboard.exportOptions().exportFormats().firstObject().scale();
    }
    else {
      exportScale = 1
    }

    var append = '';

    if (exportScale != 1) {
      append = '@'+ exportScale + 'x';
    }

    var name = artboard.name() + append;
    var width = artboard.absoluteRect().width() * exportScale;
    var height = artboard.absoluteRect().height() * exportScale;

    // create an export request for each artboard so we can control the background color
    exportRequest = MSExportRequest.alloc().init();
    exportRequest.setRect(artboard.absoluteRect().rect());
    exportRequest.setScale(exportScale);
    exportRequest.setShouldTrim(0);
    exportRequest.setSaveForWeb(1);
    exportRequest.setBackgroundColor(( artboard.hasBackgroundColor() ? artboard.backgroundColor() : MSImmutableColor.colorWithSVGString("#FFFFFF").newMutableCounterpart() ));
    exportRequest.setIncludeArtboardBackground(1);
    exportRequest.setName(name);
    exportRequest.setFormat(exportFormat);
    exportURL = tempFolderURL.URLByAppendingPathComponent(artboard.objectID()).URLByAppendingPathExtension(exportFormat);
    context.document.saveArtboardOrSlice_toFile(exportRequest, exportURL.path());

    state.frames.push({ image: exportURL.path(), name: name, width: width, height: height });
  }

  if (state.frames.length > 0) {
    // save the state to a json file in the temp folder (open this json file in your application)
    NSString.alloc().initWithData_encoding(NSJSONSerialization.dataWithJSONObject_options_error(state, NSJSONWritingPrettyPrinted, nil), NSUTF8StringEncoding).writeToFile_atomically_encoding_error(jsonFilePath, true, NSUTF8StringEncoding, nil);

    // open the temp folder for debugging
    NSWorkspace.sharedWorkspace().selectFile_inFileViewerRootedAtPath(jsonFilePath, jsonFilePath.stringByDeletingLastPathComponent());

    // Opening Json file in Gif Mock
    NSWorkspace.sharedWorkspace().openFile_withApplication(jsonFilePath, 'Gif Mock');
  }
  else {
    var message = "You must select the artboards you want to send to Gif Mock first."
    dlog(message);
    _alert("No artboards selected", message);
  }
}

var _alert = function(message, informativeText) {
  var alert = [[NSAlert alloc] init];
  [alert setMessageText:message];
  [alert addButtonWithTitle:"Dismiss"];
  if (informativeText != undefined) {
    [alert setInformativeText:informativeText]
  }
  [alert runModal]
}

var onRun = function(context) {
  try {
    sendToGifMock(context);
  }
  catch (e) {
    dlog(e);
    _alert("Something went wrong with the Gif Mock plugin.", e.message);
  }
}
